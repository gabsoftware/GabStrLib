Microsoft (R) Macro Assembler (x64) Version 9.00.21022.08   08/06/09 23:31:20
mother64.asm						     Page 1 - 1


				; ----------------------------- MOTHER64.ASM -----------------------------
				; Mother-of-All random number generator by Agner Fog
				; 64-bit mode version for x86-64 compatible microprocessors.
				;
				;  This is a multiply-with-carry type of random number generator
				;  invented by George Marsaglia.  The algorithm is:             
				;  S = 2111111111*X[n-4] + 1492*X[n-3] + 1776*X[n-2] + 5115*X[n-1] + C
				;  X[n] = S modulo 2^32
				;  C = floor(S / 2^32) 
				;
				; C++ prototypes:
				; extern "C" void         MotRandomInit(void * Pthis, int seed);      // Initialization
				; extern "C" int          MotIRandom(void * Pthis, int min, int max); // Get integer random number in desired interval
				; extern "C" double       MotRandom(void * Pthis);                    // Get floating point random number
				; extern "C" unsigned int MotBRandom(void * Pthis);                   // Output random bits
				;
				; © 1998 - 2008 Agner Fog. 
				; See asmlib-instructions.pdf for license conditions
				; ----------------------------------------------------------------------


				; structure definition and constants:
				INCLUDE randomah.asi
			      C ; ----------------------------- RANDOMAH.ASI ---------------------------
			      C ;
			      C ;  Assembly include file containing
			      C ;  structure/class definitions for random number generators
			      C ;
			      C ;  © 2001, 2007 Agner Fog.
			      C ;  GNU General Public License www.gnu.org/copyleft/gpl.html
			      C ; ----------------------------------------------------------------------
			      C 
			      C ; Definitions for Mersenne Twister:
			      C 
 = 00000001		      C TEMPERING EQU 1              ; set to 0 if no tempering (improves speed by 25%)
			      C 
			      C IF 0
			      C ELSE
			      C ; or constants for MT19937:
 = 00000270		      C MERS_N    = 624
 = 0000018D		      C MERS_M    = 397
 = 0000001F		      C MERS_R    = 31
 = 9908B0DF		      C MERS_A    = 09908B0DFH
 = 0000000B		      C MERS_U    = 11
 = 00000007		      C MERS_S    = 7
 = 0000000F		      C MERS_T    = 15
 = 00000012		      C MERS_L    = 18
 = 9D2C5680		      C MERS_B    = 9D2C5680H
 = EFC60000		      C MERS_C    = 0EFC60000H
			      C 
			      C ENDIF
			      C 
 = 7FFFFFFF		      C LOWER_MASK = (1 SHL MERS_R) - 1             ; lower MERS_R bits
 = 80000000		      C UPPER_MASK = -1 SHL MERS_R                  ; upper 32-MERS_R bits
			      C 
			      C ; Define class CRandomMersenneA member data
			      C ; Must be aligned by 16.
			      C 
 00000A70		      C CRandomMersenneA STRUC
 00000000  00000000	      C PreInt  DD      ?, ?, ?, ?             ; premade tempered integer numbers, ready to use
	   00000000
	   00000000
	   00000000
 00000010  0000000000000000   C PreFlt  DQ      ?, ?, ?, ?             ; premade floating point numbers, ready to use (subtract 1.0)
	   0000000000000000
	   0000000000000000
	   0000000000000000
 00000030  0000000000000000   C         DQ      ?                      ; last PreFlt unaligned overrun if MERS_N mod 4 = 1
 00000038  0000000000000000   C TmpFlt  DQ      ?                      ; temporary storage of floating point random number
 00000040  00000000	      C PreInx  DD      ?                      ; index to next PreInt and PreFlt number
 00000044  00000000	      C Instset DD      ?                      ; Instruction set
 00000048  00000000	      C LastInterval DD ?                      ; Last interval length for IRandomX
 0000004C  00000000	      C RLimit  DD      ?                      ; Rejection limit used by IRandomX
 00000050  00000004 [	      C TMB     DD      4 dup (?)              ; 4 copies of MERS_B constant
	    00000000
	   ]
 0DAC005C  00000004 [	      C TMC     DD      4 dup (?)              ; 4 copies of MERS_C constant
	    00000000
	   ]
 1B580068  00000002 [	      C one     DQ      2 dup (?)              ; 2 copies of 1.0 constant
	    0000000000000000
	   ]
 36B00080  00000000	      C MTI     DD      ?                      ; index into MT buffer
 36B00084  00000000	      C UMASK   DD      ?                      ; UPPER_MASK
 36B00088  00000000	      C LMASK   DD      ?                      ; LOWER_MASK             ; constants
 36B0008C  00000000	      C MATA    DD      ?                      ; MERS_A
 36B00090  00000004 [	      C wrap1   DD      4  dup (?)             ; MT buffer km wraparound
	    00000000
	   ]
 445C009C  00000270 [	      C MT      DD      MERS_N  dup (?)        ; MT history buffer (aligned by 16)
	    00000000
	   ]
 520800A8  00000004 [	      C wrap2   DD      4  dup (?)             ; MT buffer kk wraparound
	    00000000
	   ]
			      C IF MERS_N AND 3
			      C ENDIF        
			      C CRandomMersenneA ENDS
			      C 
			      C 
			      C ; Definitions for Mother-of-all generator:
			      C 
			      C ; Define class CRandomMotherA member data
			      C ; Must be aligned by 16. Preferably aligned by 64 to fit a cache line
 00000040		      C CRandomMotherA STRUC
 00000000  0000000000000000   C one     DQ      ?                      ; 1.0
 00000008  00000000	      C Instset DD      ?                      ; Instruction set
 0000000C  00000000	      C M4      DD      ?                      ; x[n-4]
 00000010  00000000	      C M3      DD      ?                      ; x[n-3] (aligned)
 00000014  00000000	      C M2      DD      ?                      ; x[n-2]
 00000018  00000000	      C M1      DD      ?                      ; x[n-1]
 0000001C  00000000	      C M0      DD      ?                      ; x[n]
 00000020  00000000	      C MC      DD      ?                      ; Carry (aligned)
 00000024  00000000	      C zero    DD      ?                      ; Zero-extension of carry
 00000028  0000000000000000   C RanP1   DQ      ?                      ; Double random number in interval [1,2)
 00000030  00000000	      C MF3     DD      ?                      ; 2111111111 (aligned)
 00000034  00000000	      C MF2     DD      ?                      ; 1492
 00000038  00000000	      C MF1     DD      ?                      ; 1776
 0000003C  00000000	      C MF0     DD      ?                      ; 5115
			      C CRandomMotherA ENDS
			      C 

 00000000			.DATA    ; data segment
				align 16

				; Data for single instance of random number generator
 00000000			MotherInstance CRandomMotherA <>
	   0000000000000000
	   00000000
	   00000000
	   00000000
	   00000000
	   00000000
	   00000000
	   00000000
	   00000000
	   0000000000000000
	   00000000
	   00000000
	   00000000
	   00000000


 00000000			.CODE    ; code segment

				; Single threaded version:
				; extern "C" unsigned int MotherBRandom(); // Output random bits

 00000000			MotherBRandom PROC                          ; entry for both Windows and Linux call
 00000000  48/ 8D 0D		        lea     rcx, MotherInstance         ; Point to instance
	   00000000 R
 00000007  EB 03		        jmp     ?Windows_MotBRandom
 00000009			MotherBRandom ENDP       

				; Thread-safe version:
				; extern "C" unsigned int MotBRandom(void * Pthis); // Output random bits

 00000009			MotBRandom PROC 
				IFDEF UNIX
 00000009  48/ 8B CF		        mov     rcx, rdi                    ; translate calling convention
				ENDIF
 0000000C			?Windows_MotBRandom LABEL NEAR 

 0000000C  66| 0F 6F 49		        movdqa  xmm1, xmmword ptr [rcx].CRandomMotherA.M3  ; load M3,M2,M1,M0
	   10
 00000011  8B 41 1C		        mov     eax,  [rcx].CRandomMotherA.M0              ; Retrieve previous random number
 00000014  66| 0F 6F D1		        movdqa  xmm2, xmm1                                 ; copy
 00000018  66| 0F 6F 59		        movdqa  xmm3, xmmword ptr [rcx].CRandomMotherA.MF3 ; factors
	   30
 0000001D  66| 0F 73 D2		        psrlq   xmm2, 32                                   ; move M2,M0 down
	   20
 00000022  66| 0F D6 49		        movq    qword ptr [rcx].CRandomMotherA.M4, xmm1    ; M4=M3, M3=M2
	   0C
 00000027  0F 17 49 14		        movhps  qword ptr [rcx].CRandomMotherA.M2, xmm1    ; M2=M1, M1=M0
 0000002B  66| 0F F4 CB		        pmuludq xmm1, xmm3                                 ; M3*MF3, M1*MF1
 0000002F  66| 0F 73 D3		        psrlq   xmm3, 32                                   ; move MF2,MF0 down
	   20
 00000034  66| 0F F4 D3		        pmuludq xmm2, xmm3                                 ; M2*MF2, M0*MF0
 00000038  66| 0F D4 CA		        paddq   xmm1, xmm2                                 ; P2+P3, P0+P1
 0000003C  0F 12 D1		        movhlps xmm2, xmm1                                 ; Get high qword
 0000003F  66| 0F D4 CA		        paddq   xmm1, xmm2                                 ; P0+P1+P2+P3
 00000043  66| 0F D4 49		        paddq   xmm1, qword ptr [rcx].CRandomMotherA.MC    ; +carry
	   20
 00000048  66| 0F D6 49		        movq    qword ptr [rcx].CRandomMotherA.M0, xmm1    ; Store new M0 and carry
	   1C
				        ; convert to double precision float
 0000004D  66| 0F 73 F1		        psllq   xmm1, 32                                   ; Discard carry bits
	   20
 00000052  66| 0F 73 D1		        psrlq   xmm1, 12                                   ; Get bits into mantissa position
	   0C
 00000057  66| 0F EB 09		        por     xmm1, xmmword ptr [rcx].CRandomMotherA.one ; Add exponent bits to get number in interval [1,2)
 0000005B  66| 0F D6 49		        movq    [rcx].CRandomMotherA.RanP1, xmm1           ; Store floating point number
	   28
 00000060  C3			        ret
				        
 00000061			MotBRandom ENDP

				        
				; Single threaded version:
				; extern "C" unsigned int MotherRandom();  // Get floating point random number

 00000061			MotherRandom PROC
				IFDEF UNIX
 00000061  48/ 8D 3D		        lea     rdi, MotherInstance         ; Point to instance
	   00000000 R
				ENDIF
				IFDEF WINDOWS
				ENDIF

				; Thread-safe version:
				; extern "C" double MotRandom(void * Pthis);  // Get floating point random number
 00000068			MotRandom LABEL NEAR
				PUBLIC MotRandom
				IFDEF UNIX
 00000068  48/ 8B CF		        mov     rcx, rdi                                   ; translate calling convention
				ENDIF
				        
				        ; get previously prepared random number
 0000006B  F2/ 0F 10 41		        movsd   xmm0, [rcx].CRandomMotherA.RanP1
	   28
 00000070  F2/ 0F 5C 01		        subsd   xmm0, [rcx].CRandomMotherA.one

				        ; make new random number ready for next time
 00000074  E8 FFFFFF93		        call    ?Windows_MotBRandom
 00000079  C3			        ret
 0000007A			MotherRandom ENDP


				; Single threaded version:
				; extern "C" unsigned int MotherIRandom(int min, int max); // Get integer random number in desired interval

 0000007A			MotherIRandom PROC
				IFDEF UNIX
 0000007A  44/ 8B C6		        mov     r8d, esi                    ; max
 0000007D  8B D7		        mov     edx, edi                    ; min
 0000007F  48/ 8D 0D		        lea     rcx, MotherInstance         ; Pthis = point to instance
	   00000000 R
 00000086  EB 08		        jmp     ?Windows_MotIRandom
				ENDIF
				IFDEF WINDOWS
				ENDIF
 00000088			MotherIRandom ENDP       

				; Thread-safe version:
				; extern "C" int MotIRandom(void * Pthis, int min, int max); // Get integer random number in desired interval
 00000088			MotIRandom PROC
				IFDEF UNIX
				        ; translate calling convention
 00000088  44/ 8B C2		        mov     r8d, edx                    ; max
 0000008B  8B D6		        mov     edx, esi                    ; min
 0000008D  48/ 8B CF		        mov     rcx, rdi                    ; Pthis
				ENDIF
				        
 00000090			?Windows_MotIRandom   LABEL NEAR            ; entry for Windows call
				        
 00000090  41/ 50		        push    r8
 00000092  52			        push    rdx
 00000093  E8 FFFFFF74		        call    ?Windows_MotBRandom         ; make random number
 00000098  59			        pop     rcx                         ; min
 00000099  41/ 58		        pop     r8                          ; max
 0000009B  44/ 2B C1		        sub     r8d, ecx
 0000009E  78 0A		        js      short rerror                ; max < min
 000000A0  41/ FF C0		        inc     r8d                         ; interval = max - min + 1
 000000A3  41/ F7 E0		        mul     r8d                         ; multiply random number eax by interval and truncate
 000000A6  8D 04 11		        lea     eax, [rdx+rcx]              ; add min to interval*BRandom >> 32
 000000A9  C3			        ret                                 ; ret 8 if not _cdecl calling

 000000AA  B8 80000000		rerror: mov     eax, 80000000h              ; error exit   
 000000AF  C3			        ret                                 ; ret 8 if not _cdecl calling
 000000B0			MotIRandom ENDP


				; Single threaded version:
				; extern "C" unsigned int MotherRandomInit(int seed);  // Initialization

 000000B0			MotherRandomInit PROC
				IFDEF UNIX
 000000B0  8B D7		        mov     edx, edi                    ; seed
 000000B2  48/ 8D 0D		        lea     rcx, MotherInstance         ; Pthis = point to instance
	   00000000 R
 000000B9  EB 05		        jmp     ?Windows_MotRandomInit
				ENDIF
				IFDEF WINDOWS
				ENDIF
 000000BB			MotherRandomInit ENDP       

				; Thread-safe version:
				; extern "C" void MotRandomInit(void * Pthis, int seed);  // Initialization
 000000BB			MotRandomInit PROC
				IFDEF UNIX
				        ; translate calling convention
 000000BB  8B D6		        mov     edx, esi                    ; seed
 000000BD  48/ 8B CF		        mov     rcx, rdi                    ; Pthis
				ENDIF
				        
 000000C0			?Windows_MotRandomInit   LABEL NEAR         ; entry for Windows call

				        ; clear my buffer
 000000C0  57			        push    rdi
 000000C1  51			        push    rcx
 000000C2  48/ 8B F9		        mov     rdi, rcx                    ; Pthis
 000000C5  B9 00000010		        mov     ecx, (type CRandomMotherA) / 4
 000000CA  33 C0		        xor     eax, eax
 000000CC  FC			        cld
 000000CD  F3/ AB		        rep     stosd
 000000CF  59			        pop     rcx
				        
				        ; insert constants
 000000D0  C7 41 04		        mov     dword ptr [rcx].CRandomMotherA.one + 4, 3FF00000H  ; high dword of 1.0       
	   3FF00000
 000000D7  C7 41 3C		        mov     [rcx].CRandomMotherA.MF0, 5115             ; factors
	   000013FB
 000000DE  C7 41 38		        mov     [rcx].CRandomMotherA.MF1, 1776
	   000006F0
 000000E5  C7 41 34		        mov     [rcx].CRandomMotherA.MF2, 1492
	   000005D4
 000000EC  C7 41 30		        mov     [rcx].CRandomMotherA.MF3, 2111111111
	   7DD4FFC7
				        
				        ; initialize from seed
 000000F3  8B C2		        mov     eax, edx                                   ; seed        
				        ; make random numbers and put them into buffer
 000000F5  69 C0 01C8E815	        imul    eax, 29943829
 000000FB  FF C8		        dec     eax
 000000FD  89 41 1C		        mov     [rcx].CRandomMotherA.M0, eax
 00000100  69 C0 01C8E815	        imul    eax, 29943829
 00000106  FF C8		        dec     eax
 00000108  89 41 18		        mov     [rcx].CRandomMotherA.M1, eax
 0000010B  69 C0 01C8E815	        imul    eax, 29943829
 00000111  FF C8		        dec     eax
 00000113  89 41 14		        mov     [rcx].CRandomMotherA.M2, eax
 00000116  69 C0 01C8E815	        imul    eax, 29943829
 0000011C  FF C8		        dec     eax
 0000011E  89 41 10		        mov     [rcx].CRandomMotherA.M3, eax
 00000121  69 C0 01C8E815	        imul    eax, 29943829
 00000127  FF C8		        dec     eax
 00000129  89 41 20		        mov     [rcx].CRandomMotherA.MC, eax

				        ; randomize some more
 0000012C  BF 00000014		        mov     edi, 20                                    ; loop counter
 00000131  E8 FFFFFED6		r90:    call    ?Windows_MotBRandom                        ; (rcx and rdi unchanged)
 00000136  FF CF		        dec     edi
 00000138  75 F7		        jnz     r90
 0000013A  5F			        pop     rdi
 0000013B  C3			        ret
 0000013C			MotRandomInit ENDP

				        END
Microsoft (R) Macro Assembler (x64) Version 9.00.21022.08   08/06/09 23:31:20
mother64.asm						     Symbols 2 - 1




Structures and Unions:

                N a m e                  Size
                                         Offset      Type

CRandomMersenneA . . . . . . . .	 00000A70
  PreInt . . . . . . . . . . . .	 00000000	 DWord
  PreFlt . . . . . . . . . . . .	 00000010	 QWord
  TmpFlt . . . . . . . . . . . .	 00000038	 QWord
  PreInx . . . . . . . . . . . .	 00000040	 DWord
  Instset  . . . . . . . . . . .	 00000044	 DWord
  LastInterval . . . . . . . . .	 00000048	 DWord
  RLimit . . . . . . . . . . . .	 0000004C	 DWord
  TMB  . . . . . . . . . . . . .	 00000050	 DWord
  TMC  . . . . . . . . . . . . .	 00000060	 DWord
  one  . . . . . . . . . . . . .	 00000070	 QWord
  MTI  . . . . . . . . . . . . .	 00000080	 DWord
  UMASK  . . . . . . . . . . . .	 00000084	 DWord
  LMASK  . . . . . . . . . . . .	 00000088	 DWord
  MATA . . . . . . . . . . . . .	 0000008C	 DWord
  wrap1  . . . . . . . . . . . .	 00000090	 DWord
  MT . . . . . . . . . . . . . .	 000000A0	 DWord
  wrap2  . . . . . . . . . . . .	 00000A60	 DWord
CRandomMotherA . . . . . . . . .	 00000040
  one  . . . . . . . . . . . . .	 00000000	 QWord
  Instset  . . . . . . . . . . .	 00000008	 DWord
  M4 . . . . . . . . . . . . . .	 0000000C	 DWord
  M3 . . . . . . . . . . . . . .	 00000010	 DWord
  M2 . . . . . . . . . . . . . .	 00000014	 DWord
  M1 . . . . . . . . . . . . . .	 00000018	 DWord
  M0 . . . . . . . . . . . . . .	 0000001C	 DWord
  MC . . . . . . . . . . . . . .	 00000020	 DWord
  zero . . . . . . . . . . . . .	 00000024	 DWord
  RanP1  . . . . . . . . . . . .	 00000028	 QWord
  MF3  . . . . . . . . . . . . .	 00000030	 DWord
  MF2  . . . . . . . . . . . . .	 00000034	 DWord
  MF1  . . . . . . . . . . . . .	 00000038	 DWord
  MF0  . . . . . . . . . . . . .	 0000003C	 DWord


Procedures, parameters, and locals:

                N a m e                 Type     Value    Attr

MotBRandom . . . . . . . . . . .	P 	 00000009 _TEXT	Length= 00000058 Public
MotIRandom . . . . . . . . . . .	P 	 00000088 _TEXT	Length= 00000028 Public
  rerror . . . . . . . . . . . .	L 	 000000AA _TEXT	
MotRandomInit  . . . . . . . . .	P 	 000000BB _TEXT	Length= 00000081 Public
  r90  . . . . . . . . . . . . .	L 	 00000131 _TEXT	
MotherBRandom  . . . . . . . . .	P 	 00000000 _TEXT	Length= 00000009 Public
MotherIRandom  . . . . . . . . .	P 	 0000007A _TEXT	Length= 0000000E Public
MotherRandomInit . . . . . . . .	P 	 000000B0 _TEXT	Length= 0000000B Public
MotherRandom . . . . . . . . . .	P 	 00000061 _TEXT	Length= 00000019 Public


Symbols:

                N a m e                 Type     Value    Attr

?Windows_MotBRandom  . . . . . .	L 	 0000000C _TEXT	
?Windows_MotIRandom  . . . . . .	L 	 00000090 _TEXT	
?Windows_MotRandomInit . . . . .	L 	 000000C0 _TEXT	
LOWER_MASK . . . . . . . . . . .	Number	 7FFFFFFFh   
MERS_A . . . . . . . . . . . . .	Number	 9908B0DFh   
MERS_B . . . . . . . . . . . . .	Number	 9D2C5680h   
MERS_C . . . . . . . . . . . . .	Number	 EFC60000h   
MERS_L . . . . . . . . . . . . .	Number	 00000012h   
MERS_M . . . . . . . . . . . . .	Number	 0000018Dh   
MERS_N . . . . . . . . . . . . .	Number	 00000270h   
MERS_R . . . . . . . . . . . . .	Number	 0000001Fh   
MERS_S . . . . . . . . . . . . .	Number	 00000007h   
MERS_T . . . . . . . . . . . . .	Number	 0000000Fh   
MERS_U . . . . . . . . . . . . .	Number	 0000000Bh   
MotRandom  . . . . . . . . . . .	L 	 00000068 _TEXT	Public
MotherInstance . . . . . . . . .	CRandomMotherA  00000000 _DATA	
TEMPERING  . . . . . . . . . . .	Number	 00000001h   
UNIX . . . . . . . . . . . . . .	Text   	 
UPPER_MASK . . . . . . . . . . .	Number	 -80000000h   

	   0 Warnings
	   0 Errors
