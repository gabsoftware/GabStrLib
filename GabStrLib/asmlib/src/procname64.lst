Microsoft (R) Macro Assembler (x64) Version 9.00.21022.08   08/06/09 23:31:20
procname64.asm						     Page 1 - 1


				;                   procname64.asm                      © Agner Fog 2008-06-03
				;
				;
				; ProcessorName
				; =============
				; This function produces a zero-terminated ASCII string containing a name
				; for the microprocessor in human-readable format.
				; 
				; © 2007 - 2008 GNU General Public License www.gnu.org/licenses/gpl.html
				;
				;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

 00000000			.data

 00000000  00000050 [		NameBuffer db 50H dup (0)              ; Static buffer to contain name
	    00
	   ]


 00000000			.code


				; ********** ProcessorName function **********
				; C++ prototype:
				; void ProcessorName (char * text);

				; This function finds the name of the microprocessor. The name is returned
				; in the parameter text, which must be a character array of at least 68 bytes.

 00000000			ProcessorName PROC

 00000000  53			        push    rbx
 00000001  57			        push    rdi
 00000002  48/ 8D 3D		        lea     rdi, NameBuffer        ; text pointer
	   00000000 R
				        
 00000009  B8 80000000		        mov     eax, 80000000H
 0000000E  0F A2		        cpuid
 00000010  3D 80000004		        cmp     eax, 80000004H         ; text if extended vendor string available
 00000015  72 3A		        jb      no_ext_vendor_string

				        ; Has extended vendor string
 00000017  B8 80000002		        mov     eax, 80000002H
 0000001C  0F A2		        cpuid
 0000001E  89 07		        mov     [rdi], eax             ; store 16 bytes of extended vendor string
 00000020  89 5F 04		        mov     [rdi+4], ebx
 00000023  89 4F 08		        mov     [rdi+8], ecx
 00000026  89 57 0C		        mov     [rdi+0CH], edx
 00000029  B8 80000003		        mov     eax, 80000003H
 0000002E  0F A2		        cpuid
 00000030  89 47 10		        mov     [rdi+10H], eax         ; next 16 bytes
 00000033  89 5F 14		        mov     [rdi+14H], ebx
 00000036  89 4F 18		        mov     [rdi+18H], ecx
 00000039  89 57 1C		        mov     [rdi+1CH], edx
 0000003C  B8 80000004		        mov     eax, 80000004H
 00000041  0F A2		        cpuid
 00000043  89 47 20		        mov     [rdi+20H], eax         ; next 16 bytes
 00000046  89 5F 24		        mov     [rdi+24H], ebx
 00000049  89 4F 28		        mov     [rdi+28H], ecx
 0000004C  89 57 2C		        mov     [rdi+2CH], edx
 0000004F  EB 10		        jmp     get_family_and_model
				        
 00000051			no_ext_vendor_string:
				        ; No extended vendor string. Get short vendor string
 00000051  33 C0		        xor     eax, eax
 00000053  0F A2		        cpuid
 00000055  89 1F		        mov     [rdi],ebx              ; store short vendor string
 00000057  89 57 04		        mov     [rdi+4],edx
 0000005A  89 4F 08		        mov     [rdi+8],ecx
 0000005D  C6 47 0C 00		        mov     BYTE PTR [rdi+12],0    ; terminate string
				        
 00000061			get_family_and_model:
 00000061  33 C0		        xor     eax, eax
 00000063  B9 00000030		        mov     ecx, 30H
 00000068  FC			        cld
 00000069  F2/ AE		        repne   SCASB                  ; find end of text
 0000006B  48/ FF CF		        dec     rdi
				        
 0000006E  C7 07 6D614620	        mov     DWORD PTR [rdi], 'maF '   ; Append text " Family "
 00000074  C7 47 04		        mov     DWORD PTR [rdi+4], ' yli'
	   20796C69
 0000007B  48/ 83 C7 08		        add     rdi, 8

 0000007F  B8 00000001		        mov     eax, 1
 00000084  0F A2		        cpuid                          ; Get family and model
 00000086  8B D8		        mov     ebx, eax
 00000088  8B C8		        mov     ecx, eax
 0000008A  C1 E8 08		        shr     eax, 8
 0000008D  83 E0 0F		        and     eax, 0FH               ; Family
 00000090  C1 E9 14		        shr     ecx, 20
 00000093  81 E1 000000FF	        and     ecx, 0FFH              ; Extended family
 00000099  03 C1		        add     eax, ecx               ; Family + extended family
 0000009B  E8 0000003B		        call    WriteHex               ; Write as hexadecimal

 000000A0  C7 07 6F4D2048	        mov     DWORD PTR [rdi], 'oM H' ; Write text "H Model "
 000000A6  C7 47 04		        mov     DWORD PTR [rdi+4], ' led'
	   206C6564
 000000AD  48/ 83 C7 08		        add     rdi, 8
				        
 000000B1  8B C3		        mov     eax, ebx
 000000B3  C1 E8 04		        shr     eax, 4
 000000B6  83 E0 0F		        and     eax, 0FH               ; Model
 000000B9  8B CB		        mov     ecx, ebx
 000000BB  C1 E9 0C		        shr     ecx, 12
 000000BE  81 E1 000000F0	        and     ecx, 0F0H              ; Extended model
 000000C4  0B C1		        or      eax, ecx               ; Model | extended model
 000000C6  E8 00000010		        call    WriteHex               ; Write as hexadecimal

 000000CB  C7 07 00000048	        mov     DWORD PTR [rdi], 'H'   ; Write text "H"
				        
 000000D1			PNEND:  ; finished
 000000D1  48/ 8D 05		        lea     rax, NameBuffer        ; Pointer to result
	   00000000 R
 000000D8  5F			        pop     rdi
 000000D9  5B			        pop     rbx
 000000DA  C3			        ret
 000000DB			ProcessorName ENDP

 000000DB			WriteHex LABEL NEAR                    ; Local function: Write 2 hexadecimal digits
				        ; Parameters: AL = number to write, RDI = text destination
 000000DB  8B C8		        mov     ecx, eax
 000000DD  C1 E9 04		        shr     ecx, 4
 000000E0  83 E1 0F		        and     ecx, 0FH               ; most significant digit first
 000000E3  83 F9 0A		        cmp     ecx, 10
 000000E6  73 05		        jnb     W1
				        ; 0 - 9
 000000E8  83 C1 30		        add     ecx, '0'
 000000EB  EB 03		        jmp     W2
 000000ED			W1:     ; A - F
 000000ED  83 C1 37		        add     ecx, 'A' - 10
 000000F0  88 0F		W2:     mov     [rdi], cl              ; write digit
				                
 000000F2  8B C8		        mov     ecx, eax
 000000F4  83 E1 0F		        and     ecx, 0FH               ; next digit
 000000F7  83 F9 0A		        cmp     ecx, 10
 000000FA  73 05		        jnb     W3
				        ; 0 - 9
 000000FC  83 C1 30		        add     ecx, '0'
 000000FF  EB 03		        jmp     W4
 00000101			W3:     ; A - F
 00000101  83 C1 37		        add     ecx, 'A' - 10
 00000104  88 4F 01		W4:     mov     [rdi+1], cl            ; write digit
 00000107  48/ 83 C7 02		        add     rdi, 2                 ; advance string pointer
 0000010B  C3			        ret
				        
				END
Microsoft (R) Macro Assembler (x64) Version 9.00.21022.08   08/06/09 23:31:20
procname64.asm						     Symbols 2 - 1




Procedures, parameters, and locals:

                N a m e                 Type     Value    Attr

ProcessorName  . . . . . . . . .	P 	 00000000 _TEXT	Length= 000000DB Public
  no_ext_vendor_string . . . . .	L 	 00000051 _TEXT	
  get_family_and_model . . . . .	L 	 00000061 _TEXT	
  PNEND  . . . . . . . . . . . .	L 	 000000D1 _TEXT	


Symbols:

                N a m e                 Type     Value    Attr

NameBuffer . . . . . . . . . . .	Byte	 00000000 _DATA	
UNIX . . . . . . . . . . . . . .	Text   	 
W1 . . . . . . . . . . . . . . .	L 	 000000ED _TEXT	
W2 . . . . . . . . . . . . . . .	L 	 000000F0 _TEXT	
W3 . . . . . . . . . . . . . . .	L 	 00000101 _TEXT	
W4 . . . . . . . . . . . . . . .	L 	 00000104 _TEXT	
WriteHex . . . . . . . . . . . .	L 	 000000DB _TEXT	

	   0 Warnings
	   0 Errors
